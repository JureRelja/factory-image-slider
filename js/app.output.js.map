{"version":3,"sources":["input.js"],"names":[],"mappings":"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","file":"app.output.js","sourcesContent":["$(document).ready(function () {\r\n\r\n    const columnGap = parseInt($(\".slider-row-upper-inner\").css('column-gap')) // Column gap is the same for the upper and lower slider rows\r\n\r\n    const upperSliderRowInner = $(\".slider-row-upper-inner\") // Getting the inner div of the upper slider row\r\n    const lowerSliderRowInner = $(\".slider-row-lower-inner\") // Getting the inner div of the lower slider row\r\n\r\n    const wrapperWidth = $(\".wrapper\").width() // Getting the width of the wrapper div\r\n\r\n\r\n    const duplicateImages = (sliderRow, images) => { // Function for duplicating images in the slider row until the width of the slider row is bigger than the width of the wrapper div\r\n        let sliderWidth = sliderRow.width(); // Getting the initial width of the slider row\r\n        let i = 0;\r\n       while (sliderWidth <= wrapperWidth) {\r\n            sliderRow.append($(`${images}:eq(${i})`).clone()) // Cloning the image with index i and appending it to the slider row\r\n            sliderWidth += $(`${images}:eq(${i})`).width(); // Adding the width of the cloned image to the width of the slider row\r\n            i++;\r\n        }\r\n    }\r\n\r\n    duplicateImages(upperSliderRowInner, \".upper-slider-image\") // Calling duplicateImages function for upper slider\r\n    duplicateImages(lowerSliderRowInner, \".lower-slider-image\") // Calling duplicateImages function for lower slider\r\n\r\n\r\n    const leftBtn = $('#left-button');\r\n    const rightBtn = $('#right-button');\r\n\r\n    rightBtn.on('mouseenter', function () {\r\n        rightBtn.children(\"img\").attr('src', './assets/arrow-gray-right.png');\r\n    }).on('mouseleave', function () {\r\n        rightBtn.children(\"img\").attr('src', './assets/arrow-blue-right.png');\r\n    });\r\n\r\n    leftBtn.on('mouseenter', function () {\r\n        leftBtn.children(\"img\").attr('src', './assets/arrow-gray-left.png');\r\n    }).on('mouseleave', function () {\r\n        leftBtn.children(\"img\").attr('src', './assets/arrow-blue-left.png');\r\n    });\r\n\r\n    let animating = false;\r\n\r\n    rightBtn.on('click', function () {\r\n        if (animating) return; // If the slider is animating, do not allow the user to click the button again\r\n\r\n        animating = true; // Setting animating to true to prevent the user from clicking the button again\r\n\r\n        //Upper slider\r\n        const upperSliderItm = $(\".upper-slider-image\"); // Getting all the images of the upper slider\r\n        const upperCurrentImage = upperSliderItm.first() // Getting the most right image of the upper slider\r\n\r\n        rightBtnClick(upperSliderItm, upperCurrentImage, upperSliderRowInner) //Calling rightBtnClick slider handler function for upper slider\r\n        \r\n        //Lower slider\r\n        const lowerSliderItm = $(\".lower-slider-image\"); // Getting all the images of the lower slider\r\n        const lowerCurrentImage = lowerSliderItm.first() // Getting the most right image of the lower slider\r\n\r\n        rightBtnClick(lowerSliderItm, lowerCurrentImage, lowerSliderRowInner) //Calling rightBtnClick slider handler function for lower slider\r\n    })\r\n\r\n    // Slider handler function for right button click\r\n    const rightBtnClick = (sliderItem, currentImg, sliderRowInner) => {\r\n        sliderRowInner.animate({ left: currentImg.width() + columnGap + \"px\" }, 300, function () {\r\n\r\n            sliderRowInner.css('left', 0 + 'px');\r\n\r\n            currentImg.insertBefore(sliderItem.last()); // Inserting the image that has overflown on the right before the image that is overflowing on the left\r\n\r\n            animating = false; // Setting animating to true to prevent the user from clicking the button again\r\n         });\r\n    }\r\n\r\n\r\n    leftBtn.on('click', function () {\r\n        if (animating) return; // If the slider is animating, do not allow the user to click the button again\r\n\r\n        animating = true; // Setting animating to true to prevent the user from clicking the button again\r\n\r\n        //Upper slider\r\n        const upperSliderItm = $(\".upper-slider-image\"); // Getting all the images of the upper slider\r\n        const upperCurrentImage = upperSliderItm.last() // Geting the uper slider overflowing image that is most left\r\n\r\n        leftBtnClick(upperSliderItm, upperCurrentImage, upperSliderRowInner) //Calling leftBtnClick slider handler function for upper slider\r\n\r\n        //Lower slider\r\n        const lowerSliderItm = $(\".lower-slider-image\");\r\n        const lowerCurrentImage = lowerSliderItm.last() // Geting the lower slider overflowing image that is most left\r\n\r\n        leftBtnClick(lowerSliderItm, lowerCurrentImage, lowerSliderRowInner) //Calling leftBtnClick slider handler function for lower slider\r\n    });\r\n\r\n    const leftBtnClick = (sliderItem, currentImg, sliderRowInner) => {\r\n        sliderRowInner.animate({ left: -currentImg.width() - columnGap + \"px\" }, 300, function () {\r\n            \r\n            sliderRowInner.css('left', 0 + 'px'); // Setting the left position of the slider to the negative width of the new first image that is overflowing on the left\r\n\r\n            const newRightImg = currentImg.insertBefore(sliderItem.first()) // Inserting the image that has overflown on the left before the image that is most right\r\n            \r\n            newRightImg.css('display', 'none') // Hiding the inserted image\r\n            \r\n            newRightImg.fadeIn() //Fading in the inserted image\r\n            \r\n            animating = false; // Setting animating to true to prevent the user from clicking the button again\r\n        });\r\n    }\r\n});\r\n\r\n\r\n\r\n"]}